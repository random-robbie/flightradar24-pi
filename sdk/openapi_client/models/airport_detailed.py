# coding: utf-8

"""
    Flightradar24 API endpoints

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.country import Country
from openapi_client.models.timezone import Timezone
from typing import Optional, Set
from typing_extensions import Self

class AirportDetailed(BaseModel):
    """
    Contains detailed airport information.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the airport.")
    iata: Optional[StrictStr] = Field(default=None, description="Airport IATA code.")
    icao: Optional[StrictStr] = Field(default=None, description="Airport ICAO code.")
    lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude expressed in decimal degrees.")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude expressed in decimal degrees.")
    elevation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Airport elevation in feet.")
    country: Optional[Country] = None
    city: Optional[StrictStr] = Field(default=None, description="City of airport.")
    state: Optional[StrictStr] = Field(default=None, description="The state where the airport is located. Only available for US, Canada, Brazil and Australia.")
    timezone: Optional[Timezone] = None
    __properties: ClassVar[List[str]] = ["name", "iata", "icao", "lon", "lat", "elevation", "country", "city", "state", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirportDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirportDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "iata": obj.get("iata"),
            "icao": obj.get("icao"),
            "lon": obj.get("lon"),
            "lat": obj.get("lat"),
            "elevation": obj.get("elevation"),
            "country": Country.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "city": obj.get("city"),
            "state": obj.get("state"),
            "timezone": Timezone.from_dict(obj["timezone"]) if obj.get("timezone") is not None else None
        })
        return _obj


