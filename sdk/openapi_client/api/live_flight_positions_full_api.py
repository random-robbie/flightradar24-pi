# coding: utf-8

"""
    Flightradar24 API endpoints

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.get_live_flight_positions_full200_response import GetLiveFlightPositionsFull200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LiveFlightPositionsFullApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_live_flight_positions_full(
        self,
        accept_version: Annotated[StrictStr, Field(description="Specifies the FR24 API version. The currently available version is `v1`.")],
        bounds: Annotated[Optional[StrictStr], Field(description="Coordinates defining an area. Order: north, south, west, east (comma-separated float values). Up to 3 decimal points will be processed.")] = None,
        flights: Annotated[Optional[StrictStr], Field(description="Flight numbers (comma-separated values).")] = None,
        callsigns: Annotated[Optional[StrictStr], Field(description="Flight callsigns (comma-separated values).")] = None,
        registrations: Annotated[Optional[StrictStr], Field(description="Aircraft registration numbers (comma-separated values).")] = None,
        painted_as: Annotated[Optional[StrictStr], Field(description="Aircraft painted in an airline\\'s livery, identified by ICAO code, but not necessarily operated by that airline, such as a regional airline operating a flight for a larger airline (comma-separated values).")] = None,
        operating_as: Annotated[Optional[StrictStr], Field(description="Aircraft operating under an airline\\'s call sign, identified by ICAO code, but not necessarily an aircraft belonging to that airline, such as an aircraft on lease from another airline (comma-separated values).")] = None,
        airports: Annotated[Optional[StrictStr], Field(description="Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values) To determine direction use format: &#60;direction&#62;:&#60;code&#62; (colon-separated)<br><br> Available directions: - both - both directions (default direction when not specified) - inbound - flights to airport - outbound - flight from airport ")] = None,
        routes: Annotated[Optional[StrictStr], Field(description="Flights between different airports or countries. Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values).")] = None,
        aircraft: Annotated[Optional[StrictStr], Field(description="Aircraft ICAO type codes (comma-separated values).")] = None,
        altitude_ranges: Annotated[Optional[StrictStr], Field(description="Flight altitude ranges (comma-separated values). Unit: feet. Minimum value: 0.")] = None,
        squawks: Annotated[Optional[StrictStr], Field(description="Squawk codes in hex format (comma-separated values).")] = None,
        categories: Annotated[Optional[StrictStr], Field(description="Categories of Flights (comma-separated values). Available values: - <b>P</b> - PASSENGER - Commercial aircraft that carry passengers as their primary purpose - <b>C</b> - CARGO - Aircraft that carry only cargo - <b>M</b> - MILITARY_AND_GOVERNMENT - Aircraft operated by military or a governmental agency - <b>J</b> - BUSINESS_JETS - Larger private aircraft, such as Gulfstream, Bombardier, and Pilatus - <b>T</b> - GENERAL_AVIATION - Non-commercial transport flights, including private, ambulance, aerial survey, flight training and instrument calibration aircraft - <b>H</b> - HELICOPTERS - Rotary wing aircraft - <b>B</b> - LIGHTER_THAN_AIR - Lighter-than-air aircraft include gas-filled airships of all kinds - <b>G</b> - GLIDERS - Unpowered aircraft - <b>D</b> - DRONES - Uncrewed aircraft, ranging from small consumer drones to larger UAVs - <b>V</b> - GROUND_VEHICLES - Transponder equipped vehicles, such as push-back tugs, fire trucks, and operations vehicles - <b>O</b> - OTHER - Aircraft appearing on Flightradar24 not classified elsewhere (International Space Station, UFOs, Santa, etc) - <b>N</b> - NON_CATEGORIZED - Aircraft not yet placed into a category in the Flightradar24 database ")] = None,
        data_sources: Annotated[Optional[StrictStr], Field(description="Source of information about flights (comma-separated values). Available values:   - ADSB   - MLAT   - ESTIMATED   - <i>Empty parameter will include all sources.</i> ")] = None,
        airspaces: Annotated[Optional[StrictStr], Field(description="Flight information region in lower or upper airspace.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results. Max value 30000.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetLiveFlightPositionsFull200Response:
        """Get real-time flight positions with detailed information

        Returns comprehensive real-time information on aircraft flight movements, including flight and aircraft details such as origin, destination, and aircraft type. At least one query parameter is required to retrieve data.

        :param accept_version: Specifies the FR24 API version. The currently available version is `v1`. (required)
        :type accept_version: str
        :param bounds: Coordinates defining an area. Order: north, south, west, east (comma-separated float values). Up to 3 decimal points will be processed.
        :type bounds: str
        :param flights: Flight numbers (comma-separated values).
        :type flights: str
        :param callsigns: Flight callsigns (comma-separated values).
        :type callsigns: str
        :param registrations: Aircraft registration numbers (comma-separated values).
        :type registrations: str
        :param painted_as: Aircraft painted in an airline\\'s livery, identified by ICAO code, but not necessarily operated by that airline, such as a regional airline operating a flight for a larger airline (comma-separated values).
        :type painted_as: str
        :param operating_as: Aircraft operating under an airline\\'s call sign, identified by ICAO code, but not necessarily an aircraft belonging to that airline, such as an aircraft on lease from another airline (comma-separated values).
        :type operating_as: str
        :param airports: Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values) To determine direction use format: &#60;direction&#62;:&#60;code&#62; (colon-separated)<br><br> Available directions: - both - both directions (default direction when not specified) - inbound - flights to airport - outbound - flight from airport 
        :type airports: str
        :param routes: Flights between different airports or countries. Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values).
        :type routes: str
        :param aircraft: Aircraft ICAO type codes (comma-separated values).
        :type aircraft: str
        :param altitude_ranges: Flight altitude ranges (comma-separated values). Unit: feet. Minimum value: 0.
        :type altitude_ranges: str
        :param squawks: Squawk codes in hex format (comma-separated values).
        :type squawks: str
        :param categories: Categories of Flights (comma-separated values). Available values: - <b>P</b> - PASSENGER - Commercial aircraft that carry passengers as their primary purpose - <b>C</b> - CARGO - Aircraft that carry only cargo - <b>M</b> - MILITARY_AND_GOVERNMENT - Aircraft operated by military or a governmental agency - <b>J</b> - BUSINESS_JETS - Larger private aircraft, such as Gulfstream, Bombardier, and Pilatus - <b>T</b> - GENERAL_AVIATION - Non-commercial transport flights, including private, ambulance, aerial survey, flight training and instrument calibration aircraft - <b>H</b> - HELICOPTERS - Rotary wing aircraft - <b>B</b> - LIGHTER_THAN_AIR - Lighter-than-air aircraft include gas-filled airships of all kinds - <b>G</b> - GLIDERS - Unpowered aircraft - <b>D</b> - DRONES - Uncrewed aircraft, ranging from small consumer drones to larger UAVs - <b>V</b> - GROUND_VEHICLES - Transponder equipped vehicles, such as push-back tugs, fire trucks, and operations vehicles - <b>O</b> - OTHER - Aircraft appearing on Flightradar24 not classified elsewhere (International Space Station, UFOs, Santa, etc) - <b>N</b> - NON_CATEGORIZED - Aircraft not yet placed into a category in the Flightradar24 database 
        :type categories: str
        :param data_sources: Source of information about flights (comma-separated values). Available values:   - ADSB   - MLAT   - ESTIMATED   - <i>Empty parameter will include all sources.</i> 
        :type data_sources: str
        :param airspaces: Flight information region in lower or upper airspace.
        :type airspaces: str
        :param limit: Limit of results. Max value 30000.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_live_flight_positions_full_serialize(
            accept_version=accept_version,
            bounds=bounds,
            flights=flights,
            callsigns=callsigns,
            registrations=registrations,
            painted_as=painted_as,
            operating_as=operating_as,
            airports=airports,
            routes=routes,
            aircraft=aircraft,
            altitude_ranges=altitude_ranges,
            squawks=squawks,
            categories=categories,
            data_sources=data_sources,
            airspaces=airspaces,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetLiveFlightPositionsFull200Response",
            '400': "GetLiveFlightPositionsFull400Response",
            '401': "object",
            '402': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_live_flight_positions_full_with_http_info(
        self,
        accept_version: Annotated[StrictStr, Field(description="Specifies the FR24 API version. The currently available version is `v1`.")],
        bounds: Annotated[Optional[StrictStr], Field(description="Coordinates defining an area. Order: north, south, west, east (comma-separated float values). Up to 3 decimal points will be processed.")] = None,
        flights: Annotated[Optional[StrictStr], Field(description="Flight numbers (comma-separated values).")] = None,
        callsigns: Annotated[Optional[StrictStr], Field(description="Flight callsigns (comma-separated values).")] = None,
        registrations: Annotated[Optional[StrictStr], Field(description="Aircraft registration numbers (comma-separated values).")] = None,
        painted_as: Annotated[Optional[StrictStr], Field(description="Aircraft painted in an airline\\'s livery, identified by ICAO code, but not necessarily operated by that airline, such as a regional airline operating a flight for a larger airline (comma-separated values).")] = None,
        operating_as: Annotated[Optional[StrictStr], Field(description="Aircraft operating under an airline\\'s call sign, identified by ICAO code, but not necessarily an aircraft belonging to that airline, such as an aircraft on lease from another airline (comma-separated values).")] = None,
        airports: Annotated[Optional[StrictStr], Field(description="Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values) To determine direction use format: &#60;direction&#62;:&#60;code&#62; (colon-separated)<br><br> Available directions: - both - both directions (default direction when not specified) - inbound - flights to airport - outbound - flight from airport ")] = None,
        routes: Annotated[Optional[StrictStr], Field(description="Flights between different airports or countries. Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values).")] = None,
        aircraft: Annotated[Optional[StrictStr], Field(description="Aircraft ICAO type codes (comma-separated values).")] = None,
        altitude_ranges: Annotated[Optional[StrictStr], Field(description="Flight altitude ranges (comma-separated values). Unit: feet. Minimum value: 0.")] = None,
        squawks: Annotated[Optional[StrictStr], Field(description="Squawk codes in hex format (comma-separated values).")] = None,
        categories: Annotated[Optional[StrictStr], Field(description="Categories of Flights (comma-separated values). Available values: - <b>P</b> - PASSENGER - Commercial aircraft that carry passengers as their primary purpose - <b>C</b> - CARGO - Aircraft that carry only cargo - <b>M</b> - MILITARY_AND_GOVERNMENT - Aircraft operated by military or a governmental agency - <b>J</b> - BUSINESS_JETS - Larger private aircraft, such as Gulfstream, Bombardier, and Pilatus - <b>T</b> - GENERAL_AVIATION - Non-commercial transport flights, including private, ambulance, aerial survey, flight training and instrument calibration aircraft - <b>H</b> - HELICOPTERS - Rotary wing aircraft - <b>B</b> - LIGHTER_THAN_AIR - Lighter-than-air aircraft include gas-filled airships of all kinds - <b>G</b> - GLIDERS - Unpowered aircraft - <b>D</b> - DRONES - Uncrewed aircraft, ranging from small consumer drones to larger UAVs - <b>V</b> - GROUND_VEHICLES - Transponder equipped vehicles, such as push-back tugs, fire trucks, and operations vehicles - <b>O</b> - OTHER - Aircraft appearing on Flightradar24 not classified elsewhere (International Space Station, UFOs, Santa, etc) - <b>N</b> - NON_CATEGORIZED - Aircraft not yet placed into a category in the Flightradar24 database ")] = None,
        data_sources: Annotated[Optional[StrictStr], Field(description="Source of information about flights (comma-separated values). Available values:   - ADSB   - MLAT   - ESTIMATED   - <i>Empty parameter will include all sources.</i> ")] = None,
        airspaces: Annotated[Optional[StrictStr], Field(description="Flight information region in lower or upper airspace.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results. Max value 30000.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetLiveFlightPositionsFull200Response]:
        """Get real-time flight positions with detailed information

        Returns comprehensive real-time information on aircraft flight movements, including flight and aircraft details such as origin, destination, and aircraft type. At least one query parameter is required to retrieve data.

        :param accept_version: Specifies the FR24 API version. The currently available version is `v1`. (required)
        :type accept_version: str
        :param bounds: Coordinates defining an area. Order: north, south, west, east (comma-separated float values). Up to 3 decimal points will be processed.
        :type bounds: str
        :param flights: Flight numbers (comma-separated values).
        :type flights: str
        :param callsigns: Flight callsigns (comma-separated values).
        :type callsigns: str
        :param registrations: Aircraft registration numbers (comma-separated values).
        :type registrations: str
        :param painted_as: Aircraft painted in an airline\\'s livery, identified by ICAO code, but not necessarily operated by that airline, such as a regional airline operating a flight for a larger airline (comma-separated values).
        :type painted_as: str
        :param operating_as: Aircraft operating under an airline\\'s call sign, identified by ICAO code, but not necessarily an aircraft belonging to that airline, such as an aircraft on lease from another airline (comma-separated values).
        :type operating_as: str
        :param airports: Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values) To determine direction use format: &#60;direction&#62;:&#60;code&#62; (colon-separated)<br><br> Available directions: - both - both directions (default direction when not specified) - inbound - flights to airport - outbound - flight from airport 
        :type airports: str
        :param routes: Flights between different airports or countries. Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values).
        :type routes: str
        :param aircraft: Aircraft ICAO type codes (comma-separated values).
        :type aircraft: str
        :param altitude_ranges: Flight altitude ranges (comma-separated values). Unit: feet. Minimum value: 0.
        :type altitude_ranges: str
        :param squawks: Squawk codes in hex format (comma-separated values).
        :type squawks: str
        :param categories: Categories of Flights (comma-separated values). Available values: - <b>P</b> - PASSENGER - Commercial aircraft that carry passengers as their primary purpose - <b>C</b> - CARGO - Aircraft that carry only cargo - <b>M</b> - MILITARY_AND_GOVERNMENT - Aircraft operated by military or a governmental agency - <b>J</b> - BUSINESS_JETS - Larger private aircraft, such as Gulfstream, Bombardier, and Pilatus - <b>T</b> - GENERAL_AVIATION - Non-commercial transport flights, including private, ambulance, aerial survey, flight training and instrument calibration aircraft - <b>H</b> - HELICOPTERS - Rotary wing aircraft - <b>B</b> - LIGHTER_THAN_AIR - Lighter-than-air aircraft include gas-filled airships of all kinds - <b>G</b> - GLIDERS - Unpowered aircraft - <b>D</b> - DRONES - Uncrewed aircraft, ranging from small consumer drones to larger UAVs - <b>V</b> - GROUND_VEHICLES - Transponder equipped vehicles, such as push-back tugs, fire trucks, and operations vehicles - <b>O</b> - OTHER - Aircraft appearing on Flightradar24 not classified elsewhere (International Space Station, UFOs, Santa, etc) - <b>N</b> - NON_CATEGORIZED - Aircraft not yet placed into a category in the Flightradar24 database 
        :type categories: str
        :param data_sources: Source of information about flights (comma-separated values). Available values:   - ADSB   - MLAT   - ESTIMATED   - <i>Empty parameter will include all sources.</i> 
        :type data_sources: str
        :param airspaces: Flight information region in lower or upper airspace.
        :type airspaces: str
        :param limit: Limit of results. Max value 30000.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_live_flight_positions_full_serialize(
            accept_version=accept_version,
            bounds=bounds,
            flights=flights,
            callsigns=callsigns,
            registrations=registrations,
            painted_as=painted_as,
            operating_as=operating_as,
            airports=airports,
            routes=routes,
            aircraft=aircraft,
            altitude_ranges=altitude_ranges,
            squawks=squawks,
            categories=categories,
            data_sources=data_sources,
            airspaces=airspaces,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetLiveFlightPositionsFull200Response",
            '400': "GetLiveFlightPositionsFull400Response",
            '401': "object",
            '402': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_live_flight_positions_full_without_preload_content(
        self,
        accept_version: Annotated[StrictStr, Field(description="Specifies the FR24 API version. The currently available version is `v1`.")],
        bounds: Annotated[Optional[StrictStr], Field(description="Coordinates defining an area. Order: north, south, west, east (comma-separated float values). Up to 3 decimal points will be processed.")] = None,
        flights: Annotated[Optional[StrictStr], Field(description="Flight numbers (comma-separated values).")] = None,
        callsigns: Annotated[Optional[StrictStr], Field(description="Flight callsigns (comma-separated values).")] = None,
        registrations: Annotated[Optional[StrictStr], Field(description="Aircraft registration numbers (comma-separated values).")] = None,
        painted_as: Annotated[Optional[StrictStr], Field(description="Aircraft painted in an airline\\'s livery, identified by ICAO code, but not necessarily operated by that airline, such as a regional airline operating a flight for a larger airline (comma-separated values).")] = None,
        operating_as: Annotated[Optional[StrictStr], Field(description="Aircraft operating under an airline\\'s call sign, identified by ICAO code, but not necessarily an aircraft belonging to that airline, such as an aircraft on lease from another airline (comma-separated values).")] = None,
        airports: Annotated[Optional[StrictStr], Field(description="Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values) To determine direction use format: &#60;direction&#62;:&#60;code&#62; (colon-separated)<br><br> Available directions: - both - both directions (default direction when not specified) - inbound - flights to airport - outbound - flight from airport ")] = None,
        routes: Annotated[Optional[StrictStr], Field(description="Flights between different airports or countries. Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values).")] = None,
        aircraft: Annotated[Optional[StrictStr], Field(description="Aircraft ICAO type codes (comma-separated values).")] = None,
        altitude_ranges: Annotated[Optional[StrictStr], Field(description="Flight altitude ranges (comma-separated values). Unit: feet. Minimum value: 0.")] = None,
        squawks: Annotated[Optional[StrictStr], Field(description="Squawk codes in hex format (comma-separated values).")] = None,
        categories: Annotated[Optional[StrictStr], Field(description="Categories of Flights (comma-separated values). Available values: - <b>P</b> - PASSENGER - Commercial aircraft that carry passengers as their primary purpose - <b>C</b> - CARGO - Aircraft that carry only cargo - <b>M</b> - MILITARY_AND_GOVERNMENT - Aircraft operated by military or a governmental agency - <b>J</b> - BUSINESS_JETS - Larger private aircraft, such as Gulfstream, Bombardier, and Pilatus - <b>T</b> - GENERAL_AVIATION - Non-commercial transport flights, including private, ambulance, aerial survey, flight training and instrument calibration aircraft - <b>H</b> - HELICOPTERS - Rotary wing aircraft - <b>B</b> - LIGHTER_THAN_AIR - Lighter-than-air aircraft include gas-filled airships of all kinds - <b>G</b> - GLIDERS - Unpowered aircraft - <b>D</b> - DRONES - Uncrewed aircraft, ranging from small consumer drones to larger UAVs - <b>V</b> - GROUND_VEHICLES - Transponder equipped vehicles, such as push-back tugs, fire trucks, and operations vehicles - <b>O</b> - OTHER - Aircraft appearing on Flightradar24 not classified elsewhere (International Space Station, UFOs, Santa, etc) - <b>N</b> - NON_CATEGORIZED - Aircraft not yet placed into a category in the Flightradar24 database ")] = None,
        data_sources: Annotated[Optional[StrictStr], Field(description="Source of information about flights (comma-separated values). Available values:   - ADSB   - MLAT   - ESTIMATED   - <i>Empty parameter will include all sources.</i> ")] = None,
        airspaces: Annotated[Optional[StrictStr], Field(description="Flight information region in lower or upper airspace.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results. Max value 30000.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get real-time flight positions with detailed information

        Returns comprehensive real-time information on aircraft flight movements, including flight and aircraft details such as origin, destination, and aircraft type. At least one query parameter is required to retrieve data.

        :param accept_version: Specifies the FR24 API version. The currently available version is `v1`. (required)
        :type accept_version: str
        :param bounds: Coordinates defining an area. Order: north, south, west, east (comma-separated float values). Up to 3 decimal points will be processed.
        :type bounds: str
        :param flights: Flight numbers (comma-separated values).
        :type flights: str
        :param callsigns: Flight callsigns (comma-separated values).
        :type callsigns: str
        :param registrations: Aircraft registration numbers (comma-separated values).
        :type registrations: str
        :param painted_as: Aircraft painted in an airline\\'s livery, identified by ICAO code, but not necessarily operated by that airline, such as a regional airline operating a flight for a larger airline (comma-separated values).
        :type painted_as: str
        :param operating_as: Aircraft operating under an airline\\'s call sign, identified by ICAO code, but not necessarily an aircraft belonging to that airline, such as an aircraft on lease from another airline (comma-separated values).
        :type operating_as: str
        :param airports: Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values) To determine direction use format: &#60;direction&#62;:&#60;code&#62; (colon-separated)<br><br> Available directions: - both - both directions (default direction when not specified) - inbound - flights to airport - outbound - flight from airport 
        :type airports: str
        :param routes: Flights between different airports or countries. Airports specified by IATA or ICAO codes or countries specified by ISO 3166-1 alpha-2 codes (comma-separated values).
        :type routes: str
        :param aircraft: Aircraft ICAO type codes (comma-separated values).
        :type aircraft: str
        :param altitude_ranges: Flight altitude ranges (comma-separated values). Unit: feet. Minimum value: 0.
        :type altitude_ranges: str
        :param squawks: Squawk codes in hex format (comma-separated values).
        :type squawks: str
        :param categories: Categories of Flights (comma-separated values). Available values: - <b>P</b> - PASSENGER - Commercial aircraft that carry passengers as their primary purpose - <b>C</b> - CARGO - Aircraft that carry only cargo - <b>M</b> - MILITARY_AND_GOVERNMENT - Aircraft operated by military or a governmental agency - <b>J</b> - BUSINESS_JETS - Larger private aircraft, such as Gulfstream, Bombardier, and Pilatus - <b>T</b> - GENERAL_AVIATION - Non-commercial transport flights, including private, ambulance, aerial survey, flight training and instrument calibration aircraft - <b>H</b> - HELICOPTERS - Rotary wing aircraft - <b>B</b> - LIGHTER_THAN_AIR - Lighter-than-air aircraft include gas-filled airships of all kinds - <b>G</b> - GLIDERS - Unpowered aircraft - <b>D</b> - DRONES - Uncrewed aircraft, ranging from small consumer drones to larger UAVs - <b>V</b> - GROUND_VEHICLES - Transponder equipped vehicles, such as push-back tugs, fire trucks, and operations vehicles - <b>O</b> - OTHER - Aircraft appearing on Flightradar24 not classified elsewhere (International Space Station, UFOs, Santa, etc) - <b>N</b> - NON_CATEGORIZED - Aircraft not yet placed into a category in the Flightradar24 database 
        :type categories: str
        :param data_sources: Source of information about flights (comma-separated values). Available values:   - ADSB   - MLAT   - ESTIMATED   - <i>Empty parameter will include all sources.</i> 
        :type data_sources: str
        :param airspaces: Flight information region in lower or upper airspace.
        :type airspaces: str
        :param limit: Limit of results. Max value 30000.
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_live_flight_positions_full_serialize(
            accept_version=accept_version,
            bounds=bounds,
            flights=flights,
            callsigns=callsigns,
            registrations=registrations,
            painted_as=painted_as,
            operating_as=operating_as,
            airports=airports,
            routes=routes,
            aircraft=aircraft,
            altitude_ranges=altitude_ranges,
            squawks=squawks,
            categories=categories,
            data_sources=data_sources,
            airspaces=airspaces,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetLiveFlightPositionsFull200Response",
            '400': "GetLiveFlightPositionsFull400Response",
            '401': "object",
            '402': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_live_flight_positions_full_serialize(
        self,
        accept_version,
        bounds,
        flights,
        callsigns,
        registrations,
        painted_as,
        operating_as,
        airports,
        routes,
        aircraft,
        altitude_ranges,
        squawks,
        categories,
        data_sources,
        airspaces,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if bounds is not None:
            
            _query_params.append(('bounds', bounds))
            
        if flights is not None:
            
            _query_params.append(('flights', flights))
            
        if callsigns is not None:
            
            _query_params.append(('callsigns', callsigns))
            
        if registrations is not None:
            
            _query_params.append(('registrations', registrations))
            
        if painted_as is not None:
            
            _query_params.append(('painted_as', painted_as))
            
        if operating_as is not None:
            
            _query_params.append(('operating_as', operating_as))
            
        if airports is not None:
            
            _query_params.append(('airports', airports))
            
        if routes is not None:
            
            _query_params.append(('routes', routes))
            
        if aircraft is not None:
            
            _query_params.append(('aircraft', aircraft))
            
        if altitude_ranges is not None:
            
            _query_params.append(('altitude_ranges', altitude_ranges))
            
        if squawks is not None:
            
            _query_params.append(('squawks', squawks))
            
        if categories is not None:
            
            _query_params.append(('categories', categories))
            
        if data_sources is not None:
            
            _query_params.append(('data_sources', data_sources))
            
        if airspaces is not None:
            
            _query_params.append(('airspaces', airspaces))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if accept_version is not None:
            _header_params['Accept-Version'] = accept_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Authorization'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/live/flight-positions/full',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


